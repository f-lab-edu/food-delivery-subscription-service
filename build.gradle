plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
}

// jacoco 버전
jacoco {
    toolVersion = "0.8.7"
}

test {
    useJUnitPlatform()
    /**
     * 테스트 할 때 JaCoCo 를 함께 실행하도록 구성.
     * 개별 테스트 실행 시 covered ratio 가 낮게 나오기 때문에 전체 테스트일 때만 finalizedBy 주석을 제거한다.
     */
     finalizedBy 'jacocoTestReport'
}

jacocoTestReport {

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/flab/foodrun/**Application.class",
                    "com/flab/foodrun/domain/user/exception/**",
                    "com/flab/foodrun/web/config/**"
            ])
        }))
    }

    // html, xml 파일을 남기도록 설정
    // xml 파일 남기는 이유는 sonarqube 연동을 위함.
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled true

        //파일 디렉토리 설정부분
        html.destination file("$buildDir/jacocoHtml")
        xml.destination file("$buildDir/jacoco.xml")
    }

    //jacocoTestReport 가 실행된 다음 jacocoTestCoverageVerification 로 다음 작업을 넘긴다.
    finalizedBy 'jacocoTestCoverageVerification'
}

// 테스트 커버리지 기준을 설정할 수 있는 부분
jacocoTestCoverageVerification {

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/flab/foodrun/**Application.class",
                    "com/flab/foodrun/domain/user/exception/**",
                    "com/flab/foodrun/web/config/**"
            ])
        }))
    }

    violationRules {
        rule {
            enabled = true
            /**
             * 코드 커버리지 체크 기준. 기준에 대해선 아래 사이트 참조
             * https://www.jacoco.org/jacoco/trunk/doc/api/org/jacoco/core/analysis/ICoverageNode.ElementType.html
             */
            element = 'CLASS'

            /**
             * counter : 커버리지 메트릭을 계산하는 단위. 단위에 대해서는 아래 사이트 참조
             * https://www.eclemma.org/jacoco/trunk/doc/counters.html
             * value : 카운터를 만족시키기 위한 방법들을 제공하는 상수. 상수에 대해서는 아래 사이트 참조
             * https://www.jacoco.org/jacoco/trunk/doc/api/org/jacoco/core/analysis/ICounter.CounterValue.html
             * minimum : 최소 비율을 나타냄
             */
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
        }
    }
}

bootJar {
    launchScript()
}

group = 'com.flab'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
    /* 검증 관련 의존 라이브러리 */
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    /* 스프링 시큐리티의 암호화 관련된 라이브러리만 포함 */
    implementation 'org.springframework.security:spring-security-crypto'
    implementation 'mysql:mysql-connector-java'
    /*HTTP 또는 메시징 스텁이 실제 서버 측 구현을 수행하는 작업을 정확히 수행하는 지 확인할 수 있도록 한다.*/
    implementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier:3.1.3'
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j:2.1.3'
    compileOnly 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.github.tomakehurst:wiremock:2.27.2'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner:3.1.3'
    annotationProcessor 'org.projectlombok:lombok'
//    implementation 'org.flywaydb:flyway-core'
//    runtimeOnly 'com.h2database:h2'
}
